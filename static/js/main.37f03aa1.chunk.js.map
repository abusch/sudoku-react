{"version":3,"sources":["selectionSlice.ts","sudoku.ts","sudokuSlice.ts","components/cell.tsx","components/block.tsx","components/board.tsx","components/controls.tsx","App.tsx","store.ts","index.tsx"],"names":["selectionSlice","createSlice","name","initialState","row","column","reducers","moveRight","state","moveLeft","moveUp","moveDown","actions","generateSudoku","sudoku","Array","fill","generateSudokuInternal","generateValidSudoku","removed_digits","idx","Math","floor","random","length","temp","countSolutions","cells","cell_idx","findEmptyCell","digits","i","t","generateRandomPermutation","digit","checkCellValid","num_solutions","col","block_row","block_col","row_offset","column_offset","digitToCell","value","locked","valid","pencilMarks","map","sudokuSlice","setDigit","action","payload","cell","cellIdx","sameColIdx","sameRowIdx","sameBlockIdx","sameCol","sameRow","sameBlock","indexOf","splice","removePencilMarks","setPencilMark","push","verify","forEach","index","checkCellObjectValid","restart","generateNew","undoable","reducer","Cell","props","displayValue","classes","selectedClass","slice","sort","join","className","selectionSelector","selection","dataSelector","present","Block","useSelector","data","blockX","x","blockY","y","selectedBlockX","selectedBlockY","j","key","Board","renderBlock","sudokuSelector","Controls","dispatch","useDispatch","id","onClick","UndoActionCreators","undo","disabled","past","App","useEffect","handleKeyDown","event","code","digitKeyToDigit","shiftKey","window","addEventListener","removeEventListener","href","store","configureStore","selectionReducer","sudokuReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37f03aa1.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\ninterface SelectionState {\n  row: number,\n  column: number,\n}\nconst initialState: SelectionState = {\n  row: 0,\n  column: 0,\n};\n\nexport const selectionSlice = createSlice({\n  name: 'selection',\n  initialState: initialState,\n  reducers: {\n    moveRight: state => {\n      state.column = (state.column === 8) ? 0 : (state.column + 1);\n    },\n    moveLeft: state => {\n      state.column = (state.column === 0) ? 8 : (state.column - 1);\n    },\n    moveUp: state => {\n      state.row = (state.row === 0) ? 8 : (state.row - 1);\n    },\n    moveDown: state => {\n      state.row = (state.row === 8) ? 0 : (state.row + 1);\n    },\n  }\n});\n\nexport const { moveRight, moveLeft, moveUp, moveDown } = selectionSlice.actions;\n\nexport default selectionSlice.reducer;\n","export interface CellData {\n  value: number,\n  locked: boolean,\n  valid: boolean,\n  pencilMarks: Array<number>,\n}\n\n// Generate a sudoku to be solve, i.e. with a number of empty cells, and with\n// the guarantee that there is a unique solution.\nfunction generateSudoku(): number[] {\n  let sudoku = generateValidSudoku();\n\n  let removed_digits = 0;\n\n  while (removed_digits <= 50) {\n    let idx = Math.floor(Math.random() * sudoku.length);\n    if (sudoku[idx] === 0) {\n      continue;\n    }\n    let temp = sudoku[idx];\n    sudoku[idx] = 0;\n    if (countSolutions([...sudoku]) === 1) {\n      removed_digits += 1;\n    } else {\n      sudoku[idx] = temp;\n    }\n  }\n\n  return sudoku;\n}\n\n// Generate a fully solved sudoku\nfunction generateValidSudoku(): number[] {\n  let sudoku: number[] = Array<number>(81);\n  sudoku.fill(0);\n\n  if (generateSudokuInternal(sudoku)) {\n    return sudoku;\n  }\n\n  return [];\n}\n\nfunction generateSudokuInternal(cells: number[]) {\n  let cell_idx = findEmptyCell(cells);\n  \n  if (cell_idx === -1) {\n    return true;\n  }\n\n  let digits = generateRandomPermutation();\n  for (const digit of digits) {\n    if (checkCellValid(cells, cell_idx, digit)) {\n      cells[cell_idx] = digit;\n      if (generateSudokuInternal(cells)) {\n        return true;\n      } else {\n        cells[cell_idx] = 0;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction countSolutions(cells: Array<number>): number {\n  let cell_idx = findEmptyCell(cells);\n\n  if (cell_idx === -1) {\n    return 1;\n  }\n\n  let num_solutions = 0;\n  for (let i = 1; i <= 9; i++) {\n    if (checkCellValid(cells, cell_idx, i)) {\n      cells[cell_idx] = i;\n      num_solutions += countSolutions(cells);\n      cells[cell_idx] = 0;\n    }\n  }\n\n  return num_solutions;\n}\n\n// Recursively attempts to solve this sudoku\nfunction solveSudoku(cells: Array<number>): boolean {\n  let cell_idx = findEmptyCell(cells);\n  if (cell_idx === -1) {\n    // No more empty cells, we've solved the sudoku\n    return true;\n  }\n\n  for (let i = 1; i <= 9; i++) {\n    if (checkCellValid(cells, cell_idx, i)) {\n      cells[cell_idx] = i;\n      if (solveSudoku(cells)) {\n        return true;\n      } else {\n        // That digit didn't work out, try the next one\n        cells[cell_idx] = 0;\n      }\n    }\n  }\n\n  // If we tried all the digits for that cell and couldn't solve the sudoku,\n  // then we've failed\n  return false;\n}\n\n// Check if placing the given digit in the given cell index is a valid move\nfunction checkCellValid(cells: Array<number>, cell_idx: number, digit: number): boolean {\n  const row = Math.floor(cell_idx / 9);\n  const col = cell_idx % 9;\n  // top-left coordinates of the 3x3 block that contains the cell\n  const block_row = Math.floor(row / 3) * 3;\n  const block_col = Math.floor(col / 3) * 3;\n\n  for (let i = 0; i < 9; i++) {\n    const row_offset = Math.floor(i / 3);\n    const column_offset = i % 3;\n    if (cells[row * 9 + i] === digit // check column\n      || cells[i * 9 + col] === digit  // check row\n      || cells[(block_row + row_offset) * 9 + (block_col + column_offset)] === digit // check block\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction checkCellObjectValid(cells: Array<CellData>, row: number, col: number, digit: number): boolean {\n  if (digit === 0) {\n    return true;\n  }\n\n  // top-left coordinates of the 3x3 block that contains the cell\n  const cellIdx = row * 9 + col;\n  const block_row = Math.floor(row / 3) * 3;\n  const block_col = Math.floor(col / 3) * 3;\n\n  for (let i = 0; i < 9; i++) {\n    const row_offset = Math.floor(i / 3);\n    const column_offset = i % 3;\n    const sameColIdx = row * 9 + i;\n    const sameRowIdx = i * 9 + col;\n    const sameBlockIdx = (block_row + row_offset) * 9 + (block_col + column_offset);\n\n    const sameCol = cells[sameColIdx].value;\n    const sameRow = cells[sameRowIdx].value;\n    const sameBlock = cells[sameBlockIdx].value;\n\n    // Make sure we don't validate the current cell with itself\n    const invalidInCol = (sameColIdx === cellIdx) ? false : (sameCol === digit);\n    const invalidInRow = (sameRowIdx === cellIdx) ? false : (sameRow === digit);\n    const invalidInBlock = (sameBlockIdx === cellIdx) ? false : (sameBlock === digit);\n\n    if (invalidInCol || invalidInRow || invalidInBlock) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// Remove the pencil marks matching the given digit in the same row/column/block as the\n// given selection.\nfunction removePencilMarks(cells: Array<CellData>, row: number, col: number, digit: number) {\n\n  // top-left coordinates of the 3x3 block that contains the cell\n  const cellIdx = row * 9 + col;\n  const block_row = Math.floor(row / 3) * 3;\n  const block_col = Math.floor(col / 3) * 3;\n\n  for (let i = 0; i < 9; i++) {\n    const row_offset = Math.floor(i / 3);\n    const column_offset = i % 3;\n    const sameColIdx = row * 9 + i;\n    const sameRowIdx = i * 9 + col;\n    const sameBlockIdx = (block_row + row_offset) * 9 + (block_col + column_offset);\n\n    const sameCol = cells[sameColIdx];\n    const sameRow = cells[sameRowIdx];\n    const sameBlock = cells[sameBlockIdx];\n\n    if (sameColIdx !== cellIdx) {\n      const i = sameCol.pencilMarks.indexOf(digit);\n      if (i !== -1) {\n        sameCol.pencilMarks.splice(i, 1);\n      }\n    }\n    if (sameRowIdx !== cellIdx) {\n      const i = sameRow.pencilMarks.indexOf(digit);\n      if (i !== -1) {\n        sameRow.pencilMarks.splice(i, 1);\n      }\n    }\n    if (sameBlockIdx !== cellIdx) {\n      const i = sameBlock.pencilMarks.indexOf(digit);\n      if (i !== -1) {\n        sameBlock.pencilMarks.splice(i, 1);\n      }\n    }\n  }\n}\n\n// Finds the first (starting from the top-right and working row by row) cell that is empty\nfunction findEmptyCell(cells: Array<number>): number {\n  for (let i = 0; i < 81; i++) {\n    if (cells[i] === 0) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// Generate a random permutation of the digits from 1 to 9\nfunction generateRandomPermutation() {\n  let digits = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  for (let i =0; i < 9; i++) {\n    let idx = i + Math.floor(Math.random() * (9 - i));\n    let t = digits[i];\n    digits[i] = digits[idx];\n    digits[idx] = t;\n  }\n\n  return digits;\n}\n\nexport {solveSudoku, checkCellObjectValid, removePencilMarks, countSolutions, generateSudoku, generateRandomPermutation};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { CellData, checkCellObjectValid, generateSudoku, removePencilMarks } from './sudoku';\nimport undoable from 'redux-undo';\n\nconst initialData = [\n  0, 0, 1, 2, 0, 3, 4, 0, 0,\n  0, 0, 0, 6, 0, 7, 0, 0, 0,\n  5, 0, 0, 0, 0, 0, 0, 0, 3,\n  3, 7, 0, 0, 0, 0, 0, 8, 1,\n  0, 0, 0, 0, 0, 0, 0, 0, 0,\n  6, 2, 0, 0, 0, 0, 0, 3, 7,\n  1, 0, 0, 0, 0, 0, 0, 0, 8,\n  0, 0, 0, 8, 0, 5, 0, 0, 0,\n  0, 0, 6, 4, 0, 2, 5, 0, 0];\n\nconst digitToCell = (digit: number) => ({\n  value: digit,\n  locked: (digit !== 0),\n  valid: true,\n  pencilMarks: [],\n});\n\nconst initialState: Array<CellData> = initialData.map(digitToCell);\n\nexport interface SudokuPayload {\n  row: number,\n  column: number,\n  digit: number,\n}\n\nexport const sudokuSlice = createSlice({\n  name: 'sudoku',\n  initialState: initialState,\n  reducers: {\n    setDigit: (state, action: PayloadAction<SudokuPayload>) => {\n      const { row, column, digit } = action.payload;\n      const cell = state[row * 9 + column];\n      if (!cell.locked) {\n        cell.value = digit;\n        cell.pencilMarks = [];\n        removePencilMarks(state, row, column, digit);\n      }\n    },\n    setPencilMark: (state, action: PayloadAction<SudokuPayload>) => {\n      const { row, column, digit } = action.payload;\n      const cell = state[row * 9 + column];\n      if (!cell.locked) {\n        const i = cell.pencilMarks.indexOf(digit);\n        if (i !== -1) {\n          cell.pencilMarks.splice(i, 1);\n        } else {\n          cell.pencilMarks.push( digit );\n          cell.value = 0;\n        } \n      }\n    },\n    verify: (state) => {\n      state.forEach((cell, index) => {\n        const row = Math.floor(index / 9);\n        const col = index % 9;\n        if (!cell.locked) {\n          cell.valid = checkCellObjectValid(state, row, col, cell.value);\n        }\n      });\n    },\n    restart: (state) => {\n      state.forEach((cell) => {\n        if (!cell.locked) {\n          cell.value = 0;\n          cell.pencilMarks = [];\n          cell.valid = true;\n        }\n      });\n    },\n    generateNew: (state) => {\n      const sudoku = generateSudoku();\n      state.splice(0, 81, ...sudoku.map(digitToCell));\n    }\n  }\n});\n\nexport const {setDigit, setPencilMark, verify, restart, generateNew} = sudokuSlice.actions;\nexport default undoable(sudokuSlice.reducer);\n","import {CellData} from '../sudoku';\n\ninterface CellProps {\n  value: CellData,\n  selectedClass: string,\n}\n\nexport const Cell: React.FC<CellProps> = (props) => {\n  const classes = [\"cell\", props.selectedClass];\n  const pencilMarks = props.value.pencilMarks.slice().sort().join(' ');\n\n  if (props.value.locked) {\n    classes.push(\"locked\");\n  }\n  if (!props.value.valid) {\n    classes.push(\"invalid\");\n  }\n\n  let displayValue;\n  if (props.value.value === 0) {\n    displayValue = pencilMarks;\n    classes.push(\"pencilMark\");\n  } else {\n    displayValue = props.value.value;\n  }\n\n  return <div className={classes.join(' ')}>\n    {displayValue}\n  </div>;\n}\n","import { useSelector } from 'react-redux';\nimport { RootState } from '../store';\nimport { Cell } from './cell';\n\ninterface BlockProps {\n  x: number,\n  y: number,\n}\n\nconst selectionSelector = (state: RootState) => state.selection;\nconst dataSelector = (state: RootState) => state.sudoku.present;\n\nexport const Block = (props: BlockProps) => {\n  const selection = useSelector(selectionSelector);\n  const data = useSelector(dataSelector);\n\n  const blockX = props.x;\n  const blockY = props.y;\n\n  const cells = [];\n  const { row, column } = selection;\n  const selectedBlockX = Math.floor(column / 3);\n  const selectedBlockY = Math.floor(row / 3);\n\n  for (let j = 0; j < 3; j++) {\n    const y = blockY * 3 + j;\n    for (let i = 0; i < 3; i++) {\n      const x = blockX * 3 + i;\n      let selectedClass;\n      if (x === column && y === row) {\n        selectedClass = \"selectedCell\";\n      } else if (x === column) {\n        selectedClass = \"selectedColumn\";\n      } else if (y === row) {\n        selectedClass = \"selectedRow\";\n      } else if (blockX === selectedBlockX && blockY === selectedBlockY) {\n        selectedClass = \"selectedBlock\";\n      } else {\n        selectedClass = \"\";\n      }\n      // Generate an appropriate key to make sure a cell is only rerendered when needed:\n      const key = x + \",\" + y + \",\" + selectedClass;\n      cells.push(<Cell key={key} value={data[y * 9 + x]} selectedClass={selectedClass} />);\n    }\n  }\n\n  return <div className=\"block\">\n    {cells}\n  </div>\n}\n","import { Block } from './block';\n\nexport const Board = () => {\n  const renderBlock = (x: number, y: number) => {\n    return <Block x={x} y={y} />;\n  };\n\n  return <div className=\"board\">\n    {renderBlock(0, 0)}\n    {renderBlock(1, 0)}\n    {renderBlock(2, 0)}\n    {renderBlock(0, 1)}\n    {renderBlock(1, 1)}\n    {renderBlock(2, 1)}\n    {renderBlock(0, 2)}\n    {renderBlock(1, 2)}\n    {renderBlock(2, 2)}\n  </div>;\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport {RootState} from '../store';\nimport {verify, restart, generateNew} from '../sudokuSlice';\nimport { ActionCreators as UndoActionCreators} from 'redux-undo';\n\nconst sudokuSelector = (state: RootState) => state.sudoku;\n\nexport const Controls = () => {\n  const sudoku = useSelector(sudokuSelector);\n  const dispatch = useDispatch();\n\n  return <div className=\"controls\">\n    <button id=\"verify\" onClick={() => dispatch(verify())}>Verify</button>\n    <button id=\"restart\" onClick={() => dispatch(restart())}>Restart</button>\n    <button id=\"new\" onClick={() => dispatch(generateNew())}>New</button>\n    <button id=\"undo\" onClick={() => dispatch(UndoActionCreators.undo())} disabled={sudoku.past.length === 0}>Undo</button>\n    </div>\n}\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { moveRight, moveLeft, moveUp, moveDown } from './selectionSlice';\nimport { setDigit, setPencilMark } from './sudokuSlice';\nimport { Board } from './components/board';\nimport { Controls } from './components/controls';\nimport './App.css';\nimport { RootState } from './store';\n\nconst selectionSelector = (state: RootState) => state.selection;\nconst App = () => {\n  const selection = useSelector(selectionSelector);\n  const dispatch = useDispatch();\n\n  const digitKeyToDigit = (code: string) => {\n    switch (code) {\n      case \"Digit1\": return 1;\n      case \"Digit2\": return 2;\n      case \"Digit3\": return 3;\n      case \"Digit4\": return 4;\n      case \"Digit5\": return 5;\n      case \"Digit6\": return 6;\n      case \"Digit7\": return 7;\n      case \"Digit8\": return 8;\n      case \"Digit9\": return 9;\n      default: return undefined;\n    }\n  }\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      let x = selection.column;\n      let y = selection.row;\n\n      if (event.key === 'j' || event.key === 'ArrowDown') {\n        dispatch(moveDown());\n      } else if (event.key === 'k' || event.key === 'ArrowUp') {\n        dispatch(moveUp());\n      } else if (event.key === 'h' || event.key === 'ArrowLeft') {\n        dispatch(moveLeft());\n      } else if (event.key === 'l' || event.key === 'ArrowRight') {\n        dispatch(moveRight());\n      } else if (event.key === 'Backspace') {\n        const payload = {\n          column: x,\n          row: y,\n          digit: 0,\n        };\n        dispatch(setDigit(payload));\n      } else {\n        const digit = digitKeyToDigit(event.code);\n        if (digit) {\n          const payload = {\n            column: x,\n            row: y,\n            digit: digit,\n          };\n          if (event.shiftKey) {\n            dispatch(setPencilMark(payload));\n          } else {\n            dispatch(setDigit(payload));\n          }\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [dispatch, selection]);\n\n\n  return (\n    <div className=\"content\">\n      <h1>SUDOKU</h1>\n      <Board />\n      <Controls />\n      <footer>\n        <div>&copy; Copyright 2021, Antoine Busch</div>\n        <div>Colours by <a href=\"https://www.nordtheme.com/\">Nord Theme</a></div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport selectionReducer from './selectionSlice';\nimport sudokuReducer from './sudokuSlice';\n\nexport const store = configureStore({\n  reducer: {\n    selection: selectionReducer,\n    sudoku: sudokuReducer,\n  }\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {store} from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}