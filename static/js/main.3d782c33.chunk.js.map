{"version":3,"sources":["selectionSlice.js","sudokuSlice.js","sudoku.js","components/cell.js","components/block.js","components/board.js","components/controls.js","App.js","store.js","index.js"],"names":["selectionSlice","createSlice","name","initialState","row","column","reducers","moveRight","state","moveLeft","moveUp","moveDown","actions","sudokuSlice","map","digit","value","locked","valid","pencilMarks","setDigit","action","payload","cell","cells","col","cellIdx","block_row","Math","floor","block_col","i","sameColIdx","sameRowIdx","sameBlockIdx","sameCol","sameRow","sameBlock","indexOf","splice","removePencilMarks","setPencilMark","push","verify","forEach","index","checkCellObjectValid","restart","undoable","reducer","Cell","props","displayValue","classes","selectedClass","slice","sort","join","className","Block","selection","useSelector","data","sudoku","present","blockX","x","blockY","y","selectedBlockX","selectedBlockY","j","key","Board","renderBlock","Controls","dispatch","useDispatch","id","onClick","UndoActionCreators","undo","disabled","past","length","App","digitKeyToDigit","code","useEffect","handleKeyDown","event","shiftKey","window","addEventListener","removeEventListener","href","configureStore","selectionReducer","sudokuReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.3d782c33.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const selectionSlice = createSlice({\n  name: 'selection',\n  initialState: {\n    row: 0,\n    column: 0,\n  },\n  reducers: {\n    moveRight: state => {\n      state.column = (state.column === 8) ? 0 : (state.column + 1);\n    },\n    moveLeft: state => {\n      state.column = (state.column === 0) ? 8 : (state.column - 1);\n    },\n    moveUp: state => {\n      state.row = (state.row === 0) ? 8 : (state.row - 1);\n    },\n    moveDown: state => {\n      state.row = (state.row === 8) ? 0 : (state.row + 1);\n    },\n  }\n});\n\nexport const { moveRight, moveLeft, moveUp, moveDown } = selectionSlice.actions;\n\nexport default selectionSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { checkCellObjectValid, removePencilMarks } from './sudoku';\nimport undoable from 'redux-undo';\n\nconst initialData = [\n  0, 0, 1, 2, 0, 3, 4, 0, 0,\n  0, 0, 0, 6, 0, 7, 0, 0, 0,\n  5, 0, 0, 0, 0, 0, 0, 0, 3,\n  3, 7, 0, 0, 0, 0, 0, 8, 1,\n  0, 0, 0, 0, 0, 0, 0, 0, 0,\n  6, 2, 0, 0, 0, 0, 0, 3, 7,\n  1, 0, 0, 0, 0, 0, 0, 0, 8,\n  0, 0, 0, 8, 0, 5, 0, 0, 0,\n  0, 0, 6, 4, 0, 2, 5, 0, 0];\n\nconst digitToCell = (digit) => ({\n  value: digit,\n  locked: (digit !== 0),\n  valid: true,\n  pencilMarks: [],\n});\n\nexport const sudokuSlice = createSlice({\n  name: 'sudoku',\n  initialState: initialData.map(digitToCell),\n  reducers: {\n    setDigit: (state, action) => {\n      const { row, column, digit } = action.payload;\n      const cell = state[row * 9 + column];\n      if (!cell.locked) {\n        cell.value = digit;\n        cell.pencilMarks = [];\n        removePencilMarks(state, row, column, digit);\n      }\n    },\n    setPencilMark: (state, action) => {\n      const { row, column, digit } = action.payload;\n      const cell = state[row * 9 + column];\n      if (!cell.locked) {\n        const i = cell.pencilMarks.indexOf(digit);\n        if (i !== -1) {\n          cell.pencilMarks.splice(i, 1);\n        } else {\n          cell.pencilMarks.push( digit );\n          cell.value = 0;\n        } \n      }\n    },\n    verify: (state) => {\n      state.forEach((cell, index) => {\n        const row = Math.floor(index / 9);\n        const col = index % 9;\n        if (!cell.locked) {\n          cell.valid = checkCellObjectValid(state, row, col, cell.value);\n        }\n      });\n    },\n    restart: (state) => {\n      state.forEach((cell) => {\n        if (!cell.locked) {\n          cell.value = 0;\n          cell.pencilMarks = [];\n          cell.valid = true;\n        }\n      });\n    }\n  }\n});\n\nexport const {setDigit, setPencilMark, verify, restart} = sudokuSlice.actions;\nexport default undoable(sudokuSlice.reducer);\n","// Recursively attempts to solve this sudoku\nfunction solveSudoku(cells) {\n  let cell_idx = findEmptyCell(cells);\n  if (cell_idx === -1) {\n    // No more empty cells, we've solved the sudoku\n    return true;\n  }\n\n  for (let i = 1; i <= 9; i++) {\n    if (checkCellValid(cells, cell_idx, i)) {\n      cells[cell_idx] = i;\n      if (solveSudoku(cells)) {\n        return true;\n      } else {\n        // That digit didn't work out, try the next one\n        cells[cell_idx] = 0;\n      }\n    }\n  }\n\n  // If we tried all the digits for that cell and couldn't solve the sudoku,\n  // then we've failed\n  return false;\n}\n\nfunction checkCellValid(cells, cell_idx, digit) {\n  const row = Math.floor(cell_idx / 9);\n  const col = cell_idx % 9;\n  // top-left coordinates of the 3x3 block that contains the cell\n  const block_row = Math.floor(row / 3) * 3;\n  const block_col = Math.floor(col / 3) * 3;\n\n  for (let i = 0; i < 9; i++) {\n    const row_offset = Math.floor(i / 3);\n    const column_offset = i % 3;\n    if (cells[row * 9 + i] === digit // check column\n      || cells[i * 9 + col] === digit  // check row\n      || cells[(block_row + row_offset) * 9 + (block_col + column_offset)] === digit // check block\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction checkCellObjectValid(cells, row, col, digit) {\n  if (digit === 0) {\n    return true;\n  }\n\n  // top-left coordinates of the 3x3 block that contains the cell\n  const cellIdx = row * 9 + col;\n  const block_row = Math.floor(row / 3) * 3;\n  const block_col = Math.floor(col / 3) * 3;\n\n  for (let i = 0; i < 9; i++) {\n    const row_offset = Math.floor(i / 3);\n    const column_offset = i % 3;\n    const sameColIdx = row * 9 + i;\n    const sameRowIdx = i * 9 + col;\n    const sameBlockIdx = (block_row + row_offset) * 9 + (block_col + column_offset);\n\n    const sameCol = cells[sameColIdx].value;\n    const sameRow = cells[sameRowIdx].value;\n    const sameBlock = cells[sameBlockIdx].value;\n\n    // Make sure we don't validate the current cell with itself\n    const invalidInCol = (sameColIdx === cellIdx) ? false : (sameCol === digit);\n    const invalidInRow = (sameRowIdx === cellIdx) ? false : (sameRow === digit);\n    const invalidInBlock = (sameBlockIdx === cellIdx) ? false : (sameBlock === digit);\n\n    if (invalidInCol || invalidInRow || invalidInBlock) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// Remove the pencil marks matching the given digit in the same row/column/block as the\n// given selection.\nfunction removePencilMarks(cells, row, col, digit) {\n\n  // top-left coordinates of the 3x3 block that contains the cell\n  const cellIdx = row * 9 + col;\n  const block_row = Math.floor(row / 3) * 3;\n  const block_col = Math.floor(col / 3) * 3;\n\n  for (let i = 0; i < 9; i++) {\n    const row_offset = Math.floor(i / 3);\n    const column_offset = i % 3;\n    const sameColIdx = row * 9 + i;\n    const sameRowIdx = i * 9 + col;\n    const sameBlockIdx = (block_row + row_offset) * 9 + (block_col + column_offset);\n\n    const sameCol = cells[sameColIdx];\n    const sameRow = cells[sameRowIdx];\n    const sameBlock = cells[sameBlockIdx];\n\n    if (sameColIdx !== cellIdx) {\n      const i = sameCol.pencilMarks.indexOf(digit);\n      if (i !== -1) {\n        sameCol.pencilMarks.splice(i, 1);\n      }\n    }\n    if (sameRowIdx !== cellIdx) {\n      const i = sameRow.pencilMarks.indexOf(digit);\n      if (i !== -1) {\n        sameRow.pencilMarks.splice(i, 1);\n      }\n    }\n    if (sameBlockIdx !== cellIdx) {\n      const i = sameBlock.pencilMarks.indexOf(digit);\n      if (i !== -1) {\n        sameBlock.pencilMarks.splice(i, 1);\n      }\n    }\n  }\n}\n\nfunction findEmptyCell(cells) {\n  for (let i = 0; i < 81; i++) {\n    if (cells[i] === 0) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nexport {solveSudoku, checkCellObjectValid, removePencilMarks};\n","export const Cell = (props) => {\n  const classes = [\"cell\", props.selectedClass];\n  const pencilMarks = props.value.pencilMarks.slice().sort().join(' ');\n\n  if (props.value.locked) {\n    classes.push(\"locked\");\n  }\n  if (!props.value.valid) {\n    classes.push(\"invalid\");\n  }\n\n  let displayValue;\n  if (props.value.value === 0) {\n    displayValue = pencilMarks;\n    classes.push(\"pencilMark\");\n  } else {\n    displayValue = props.value.value;\n  }\n\n  return <div className={classes.join(' ')}>\n    {displayValue}\n  </div>;\n}\n","import { useSelector } from 'react-redux';\nimport { Cell } from './cell';\n\nexport const Block = (props) => {\n  const selection = useSelector(state => state.selection);\n  const data = useSelector(state => state.sudoku.present);\n\n  const blockX = props.x;\n  const blockY = props.y;\n\n  const cells = [];\n  const { row, column } = selection;\n  const selectedBlockX = Math.floor(column / 3);\n  const selectedBlockY = Math.floor(row / 3);\n\n  for (let j = 0; j < 3; j++) {\n    const y = blockY * 3 + j;\n    for (let i = 0; i < 3; i++) {\n      const x = blockX * 3 + i;\n      let selectedClass;\n      if (x === column && y === row) {\n        selectedClass = \"selectedCell\";\n      } else if (x === column) {\n        selectedClass = \"selectedColumn\";\n      } else if (y === row) {\n        selectedClass = \"selectedRow\";\n      } else if (blockX === selectedBlockX && blockY === selectedBlockY) {\n        selectedClass = \"selectedBlock\";\n      } else {\n        selectedClass = \"\";\n      }\n      // Generate an appropriate key to make sure a cell is only rerendered when needed:\n      const key = x + \",\" + y + \",\" + selectedClass;\n      cells.push(<Cell key={key} value={data[y * 9 + x]} selectedClass={selectedClass} />);\n    }\n  }\n\n  return <div className=\"block\">\n    {cells}\n  </div>\n}\n","import { Block } from './block';\n\nexport const Board = () => {\n  const renderBlock = (x, y) => {\n    return <Block x={x} y={y} />;\n  };\n\n  return <div className=\"board\">\n    {renderBlock(0, 0)}\n    {renderBlock(1, 0)}\n    {renderBlock(2, 0)}\n    {renderBlock(0, 1)}\n    {renderBlock(1, 1)}\n    {renderBlock(2, 1)}\n    {renderBlock(0, 2)}\n    {renderBlock(1, 2)}\n    {renderBlock(2, 2)}\n  </div>;\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport {verify, restart} from '../sudokuSlice';\nimport { ActionCreators as UndoActionCreators} from 'redux-undo';\n\nexport const Controls = (props) => {\n  const sudoku = useSelector(state => state.sudoku);\n  const dispatch = useDispatch();\n\n  return <div className=\"controls\">\n    <button id=\"verify\" onClick={() => dispatch(verify())}>Verify</button>\n    <button id=\"restart\" onClick={() => dispatch(restart())}>Restart</button>\n    <button id=\"undo\" onClick={() => dispatch(UndoActionCreators.undo())} disabled={sudoku.past.length === 0}>Undo</button>\n    </div>\n}\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { moveRight, moveLeft, moveUp, moveDown } from './selectionSlice';\nimport { setDigit, setPencilMark } from './sudokuSlice';\nimport { Board } from './components/board';\nimport { Controls } from './components/controls';\nimport './App.css';\n\nconst App = () => {\n  const selection = useSelector(state => state.selection);\n  const dispatch = useDispatch();\n\n  const digitKeyToDigit = (code) => {\n    switch (code) {\n      case \"Digit1\": return 1;\n      case \"Digit2\": return 2;\n      case \"Digit3\": return 3;\n      case \"Digit4\": return 4;\n      case \"Digit5\": return 5;\n      case \"Digit6\": return 6;\n      case \"Digit7\": return 7;\n      case \"Digit8\": return 8;\n      case \"Digit9\": return 9;\n      default: return undefined;\n    }\n  }\n\n  useEffect(() => {\n    const handleKeyDown = (event) => {\n      let x = selection.column;\n      let y = selection.row;\n\n      if (event.key === 'j' || event.key === 'ArrowDown') {\n        dispatch(moveDown());\n      } else if (event.key === 'k' || event.key === 'ArrowUp') {\n        dispatch(moveUp());\n      } else if (event.key === 'h' || event.key === 'ArrowLeft') {\n        dispatch(moveLeft());\n      } else if (event.key === 'l' || event.key === 'ArrowRight') {\n        dispatch(moveRight());\n      } else if (digitKeyToDigit(event.code)) {\n        const payload = {\n          column: x,\n          row: y,\n          digit: digitKeyToDigit(event.code),\n        };\n        if (event.shiftKey) {\n          dispatch(setPencilMark(payload));\n        } else {\n          dispatch(setDigit(payload));\n        }\n      } else if (event.key === 'Backspace') {\n        const payload = {\n          column: x,\n          row: y,\n          digit: 0,\n        };\n        dispatch(setDigit(payload));\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [dispatch, selection]);\n\n\n  return (\n    <div className=\"content\">\n      <h1>SUDOKU</h1>\n      <Board />\n      <Controls />\n      <footer>\n        <div>&copy; Copyright 2021, Antoine Busch</div>\n        <div>Colours by <a href=\"https://www.nordtheme.com/\">Nord Theme</a></div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport selectionReducer from './selectionSlice';\nimport sudokuReducer from './sudokuSlice';\n\nexport default configureStore({\n  reducer: {\n    selection: selectionReducer,\n    sudoku: sudokuReducer,\n  }\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}